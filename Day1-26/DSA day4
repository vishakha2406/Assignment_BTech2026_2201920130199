6. Zigzag Conversion

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

class Solution {
    public String convert(String s, int numRows) {
        int len=s.length();
        if(numRows>=len || numRows==1){
            return s;
        }
        int dia=numRows-2;
        int col=(len/(dia+numRows))+1;
        int column=col*(dia+1);
        char[][] arr=new char[numRows][column];
        for(int i=0;i<numRows;i++){
            for(int j=0;j<column;j++){
                arr[i][j]='#';
            }
        }
        int idx=0;
        int i=0;
        int j=0;
        while(idx<len){
            for(int k=0;k<numRows;k++){
                if(idx>=len){
                    break;
                }
                arr[i][j]=s.charAt(idx);
                idx++;
                i++;
            }
            i--;
            if(idx>=len){
                break;
            }
            for(int k=0;k<numRows-2;k++){
                j++;
                i--;
                if(idx>=len){
                    break;
                }
                arr[i][j]=s.charAt(idx);
                idx++;
            }j++;
            i--;
        }
        StringBuilder sb=new StringBuilder();
        for(i=0;i<numRows;i++){
            for(j=0;j<column;j++){
                if(arr[i][j]!='#'){
                    sb.append(arr[i][j]);
                }
            }
        }
        return sb.toString();
    }
}
// P       H 
// A     S I 
// Y   I   R
// P L     I  G
// A       N




1684. Count the Number of Consistent Strings

You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int n=words.length;
        int count=0;
        int[] rr= new int[26];
        for(int i=0;i<allowed.length();i++){
            rr[allowed.charAt(i)-97]++;
        }
        for(int i=0;i<n;i++){
            String s=words[i];
            int op=0;
            for(int j=0;j<s.length();j++){
                if(rr[s.charAt(j)-97]<1){
                    op=1;
                }
            }
            if(op==0){
                count++;
            }
        }
        return count;
    }
}
