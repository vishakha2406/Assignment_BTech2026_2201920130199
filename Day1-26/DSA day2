1678. Goal Parser Interpretation
You own a Goal Parser that can interpret a string command. The command consists of an alphabet of "G", "()" and/or "(al)" in some order. The Goal Parser will interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.

class Solution {
    public String interpret(String command) {
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<command.length();i++){
            if(command.charAt(i)=='('){
                if(command.charAt(i+1)==')'){
                    sb.append('o');
                    i++;
                }
            }else if(command.charAt(i)!=')'){
                sb.append(command.charAt(i));
            }
        }
        return sb.toString();
    }
}

Approach Explanation:

Initialize a StringBuilder – This is used to build the final interpreted string efficiently.
Iterate through the command string character by character.
If the current character is '(':
Check the next character:
If it's ')', append 'o' to the result and skip the next character by incrementing i.
If the character is not ')', it must be 'G', so directly append it.
Return the built string.
Time Complexity: 𝑂(𝑛)
Space Complexity: 𝑂(𝑛)




2114. Maximum Number of Words Found in Sentences
A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

You are given an array of strings sentences, where each sentences[i] represents a single sentence.

Return the maximum number of words that appear in a single sentence.

class Solution {
    public int mostWordsFound(String[] sentences) {
        int max=0;
        for(int i=0;i<sentences.length;i++){
            String[] arr=sentences[i].split(" ");
            max=Math.max(max,arr.length);
        }
        return max; 
    }
}

Approach Explanation:

Initialize a variable max to track the highest word count.
Iterate through the sentences array:
Split each sentence by spaces using split(" ") to get an array of words.
Find the length of this array (number of words).
Update max with the maximum length found so far.
Return the maximum word count.
Time Complexity: 𝑂(𝑛⋅𝑚)
Space Complexity: 𝑂(1)



1816. Truncate Sentence
A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).

For example, "Hello World", "HELLO", and "hello world hello world" are all sentences.
You are given a sentence s​​​​​​ and an integer k​​​​​​. You want to truncate s​​​​​​ such that it contains only the first k​​​​​​ words. Return s​​​​​​ after truncating it.

class Solution {
    public String truncateSentence(String s, int k) {
        StringBuilder sb=new StringBuilder();
        String[] arr=s.split(" ");
        for(int i=0;i<k;i++){
            if(i==(k-1)){
                sb.append(arr[i]);
                break;
            }
            sb.append(arr[i]+" ");
        }
        return sb.toString();
    }
}

Approach Explanation:

Split the given sentence s by spaces to separate words into an array.
Use a StringBuilder to build the truncated sentence.
Iterate through the first k words.
If it’s the last word to add, append it without a trailing space.
Convert StringBuilder to a string and return it.
Time Complexity: 𝑂(𝑛)
Space Complexity: 𝑂(𝑛)
