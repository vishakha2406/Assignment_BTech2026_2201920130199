2149. Rearrange Array Elements by Sign

You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
You should return the array of nums such that the the array follows the given conditions:
Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n= nums.length;
        ArrayList<Integer> arr=new ArrayList<>();
        ArrayList<Integer> brr=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                arr.add(nums[i]);
            }else{
                brr.add(nums[i]);
            }
        }
        int idx=0;
        int inx=0;
        for(int i=0;i<n;i++){
            if(i%2==0){
                nums[i]=arr.get(idx++);
            }else{
                nums[i]=brr.get(inx++);
            }
        }
        return nums;
    }
}



2094. Finding 3-Digit Even Numbers

You are given an integer array digits, where each element is a digit. The array may contain duplicates.
You need to find all the unique integers that follow the given requirements:
The integer consists of the concatenation of three elements from digits in any arbitrary order.
The integer does not have leading zeros.
The integer is even.
For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.
Return a sorted array of the unique integers.

class Solution {
    public int[] findEvenNumbers(int[] digits) {
        int n=digits.length;
        HashSet<Integer> op=new HashSet<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(i!=j && j!=k && k!=i && digits[i]!=0){
                        String st=digits[i]+""+digits[j]+""+digits[k];
                        int num = Integer.parseInt(st);
                        if(num%2==0){
                            op.add(num);
                        }
                    }
                }
            }
        }
        int[] nw=new int[op.size()];
        int i=0;
        for(int ele : op){
            nw[i]=ele;
            i++;
        }
        Arrays.sort(nw);
        return nw;
    }
}
